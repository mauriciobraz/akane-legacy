// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Users         User[]
  Punishments   Punishment[]
  TicketChannel TicketChannel[]

  guildId String   @unique
  Ticket  Ticket[]
}

model User {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Guilds           Guild[]
  Punishments      Punishment[]
  PunishmentsGiven Punishment[] @relation(name: "PunishmentPunisher")

  Ticket                  Ticket[]
  TicketModeratorResponse TicketModeratorResponseRate[]

  userId String @unique
}

model Punishment {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String

  User   User   @relation(fields: [userId], references: [id])
  userId String

  UserPunisher User   @relation(fields: [punisherId], references: [id], name: "PunishmentPunisher")
  punisherId   String

  time   DateTime?
  type   PunishmentType
  reason String
  proofs String[]
}

model TicketChannel {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String

  Tickets Ticket[]

  channelId String @unique

  type        TicketChannelType
  title       String
  description String
}

model Ticket {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String

  User   User   @relation(fields: [userId], references: [id])
  userId String

  TicketChannel   TicketChannel @relation(fields: [ticketChannelId], references: [id])
  ticketChannelId String

  TicketModeratorResponseRate TicketModeratorResponseRate[]

  status      TicketStatus
  closeReason String?
}

model TicketModeratorResponseRate {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId String

  User   User   @relation(fields: [userId], references: [id])
  userId String

  messagesCount Int @default(0)
}

enum PunishmentType {
  BAN
  KICK
  MUTE
  REVERT
  WARN
}

enum TicketChannelType {
  GUILD_TEXT
  GUILD_VOICE
  PUBLIC_THREAD
}

enum TicketStatus {
  OPEN
  CLOSED
  RESOLVED
}
